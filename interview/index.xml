<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>面试专题 on Go Learn</title>
    <link>https://bytemode.github.io/interview/</link>
    <description>Recent content in 面试专题 on Go Learn</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 15 Nov 2018 12:32:37 +0800</lastBuildDate>
    
	<atom:link href="https://bytemode.github.io/interview/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Golang语言</title>
      <link>https://bytemode.github.io/interview/interview-golang-language/</link>
      <pubDate>Thu, 26 Jul 2018 00:00:00 +0800</pubDate>
      
      <guid>https://bytemode.github.io/interview/interview-golang-language/</guid>
      <description>1.select是随机的还是顺序的？
 select会随机选择一个可用通道做收发操作
 2.Go语言局部变量分配在栈还是堆？
 Go语言编译器会自动决定把一个变量放在栈还是放在堆，编译器会做逃逸分析，当发现变量的作用域没有跑出函数范围，就可以在栈上，反之则必须分配在堆。
查看资料
 3.简述一下你对Go垃圾回收机制的理解？
 v1.1 STW
v1.3 Mark STW, Sweep 并行
v1.5 三色标记法
v1.8 hybrid write barrier(混合写屏障：优化STW)
Golang垃圾回收剖析
 4.简述一下golang的协程调度原理?
 M(machine): 代表着真正的执行计算资源，可以认为它就是os thread（系统线程）。
P(processor): 表示逻辑processor，是线程M的执行的上下文。
G(goroutine): 调度系统的最基本单位goroutine，存储了goroutine的执行stack信息、goroutine状态以及goroutine的任务函数等。
查看资料
 5.介绍下 golang 的 runtime 机制?
 Runtime 负责管理任务调度，垃圾收集及运行环境。同时，Go提供了一些高级的功能，如goroutine, channel, 以及Garbage collection。这些高级功能需要一个runtime的支持. runtime和用户编译后的代码被linker静态链接起来，形成一个可执行文件。这个文件从操作系统角度来说是一个user space的独立的可执行文件。 从运行的角度来说，这个文件由2部分组成，一部分是用户的代码，另一部分就是runtime。runtime通过接口函数调用来管理goroutine, channel及其他一些高级的功能。从用户代码发起的调用操作系统API的调用都会被runtime拦截并处理。
Go runtime的一个重要的组成部分是goroutine scheduler。他负责追踪，调度每个goroutine运行，实际上是从应用程序的process所属的thread pool中分配一个thread来执行这个goroutine。因此，和java虚拟机中的Java thread和OS thread映射概念类似，每个goroutine只有分配到一个OS thread才能运行。
相关资料
 6.如何获取 go 程序运行时的协程数量, gc 时间, 对象数, 堆栈信息?
调用接口 runtime.ReadMemStats 可以获取以上所有信息, 注意: 调用此接口会触发 STW(Stop The World)</description>
    </item>
    
    <item>
      <title>Golang面试题解析（一）</title>
      <link>https://bytemode.github.io/interview/articles/interview_analysis_1/</link>
      <pubDate>Thu, 26 Jul 2018 00:00:00 +0800</pubDate>
      
      <guid>https://bytemode.github.io/interview/articles/interview_analysis_1/</guid>
      <description>最近在很多地方看到了golang的面试题，看到了很多人对Golang的面试题心存恐惧，也是为了复习基础，我把解题的过程总结下来。
面试题 1. 写出下面代码输出内容。 package main import ( &amp;#34;fmt&amp;#34; ) func main() { defer_call() } func defer_call() { defer func() { fmt.Println(&amp;#34;打印前&amp;#34;) }() defer func() { fmt.Println(&amp;#34;打印中&amp;#34;) }() defer func() { fmt.Println(&amp;#34;打印后&amp;#34;) }() panic(&amp;#34;触发异常&amp;#34;) } 考点：defer执行顺序 解答： defer 是后进先出。 协程遇到panic时，遍历本协程的defer链表，并执行defer。在执行defer过程中，遇到recover则停止panic，返回recover处继续往下执行。如果没有遇到recover，遍历完本协程的defer链表后，向stderr抛出panic信息。从执行顺序上来看，实际上是按照先进后出的顺序执行defer
打印后 打印中 打印前 panic: 触发异常 注意：请用独立终端运行，排查某些IDE对stderr和stdout处理问题导致输出顺序不一致。
2. 以下代码有什么问题，说明原因。 type student struct { Name string Age int } func pase_student() { m := make(map[string]*student) stus := []student{ {Name: &amp;#34;zhou&amp;#34;, Age: 24}, {Name: &amp;#34;li&amp;#34;, Age: 23}, {Name: &amp;#34;wang&amp;#34;, Age: 22}, } for _, stu := range stus { m[stu.</description>
    </item>
    
    <item>
      <title>Golang面试题解析（三）</title>
      <link>https://bytemode.github.io/interview/articles/interview_analysis_3/</link>
      <pubDate>Thu, 26 Jul 2018 00:00:00 +0800</pubDate>
      
      <guid>https://bytemode.github.io/interview/articles/interview_analysis_3/</guid>
      <description>21.编译执行下面代码会出现什么? package main var( size :=1024 max_size = size*2 ) func main() { println(size,max_size) } 解析 考点:变量简短模式
变量简短模式限制： - 定义变量同时显式初始化 - 不能提供数据类型 - 只能在函数内部使用
结果：
syntax error: unexpected :=  22.下面函数有什么问题？ package main const cl = 100 var bl = 123 func main() { println(&amp;amp;bl,bl) println(&amp;amp;cl,cl) }  解析 考点:常量
常量不同于变量的在运行期分配内存，常量通常会被编译器在预处理阶段直接展开，作为指令数据使用，
cannot take the address of cl  23.编译执行下面代码会出现什么? package main func main() { for i:=0;i&amp;lt;10 ;i++ { loop: println(i) } goto loop }  解析 考点：goto</description>
    </item>
    
    <item>
      <title>Golang面试题解析（二）</title>
      <link>https://bytemode.github.io/interview/articles/interview_analysis_2/</link>
      <pubDate>Thu, 26 Jul 2018 00:00:00 +0800</pubDate>
      
      <guid>https://bytemode.github.io/interview/articles/interview_analysis_2/</guid>
      <description>12.是否可以编译通过？如果通过，输出什么？ func main() { i := GetValue() switch i.(type) { case int: println(&amp;#34;int&amp;#34;) case string: println(&amp;#34;string&amp;#34;) case interface{}: println(&amp;#34;interface&amp;#34;) default: println(&amp;#34;unknown&amp;#34;) } } func GetValue() int { return 1 } 解析 考点：type
编译失败，因为type只能使用在interface
13.下面函数有什么问题？ func funcMui(x,y int)(sum int,error){ return x+y,nil } 解析 考点：函数返回值命名 在函数有多个返回值时，只要有一个返回值有指定命名，其他的也必须有命名。 如果返回值有有多个返回值必须加上括号； 如果只有一个返回值并且有命名也需要加上括号； 此处函数第一个返回值有sum名称，第二个未命名，所以错误。
14.是否可以编译通过？如果通过，输出什么？ package main func main() { println(DeferFunc1(1)) println(DeferFunc2(1)) println(DeferFunc3(1)) } func DeferFunc1(i int) (t int) { t = i defer func() { t += 3 }() return t } func DeferFunc2(i int) int { t := i defer func() { t += 3 }() return t } func DeferFunc3(i int) (t int) { defer func() { t += i }() return 2 } 解析 考点:defer和函数返回值 需要明确一点是defer需要在函数结束前执行。 函数返回值名字会在函数起始处被初始化为对应类型的零值并且作用域为整个函数 DeferFunc1有函数返回值t作用域为整个函数，在return之前defer会被执行，所以t会被修改，返回4; DeferFunc2函数中t的作用域为函数，返回1; DeferFunc3返回3</description>
    </item>
    
    <item>
      <title>Golang面试题解析（四）</title>
      <link>https://bytemode.github.io/interview/articles/interview_analysis_4/</link>
      <pubDate>Thu, 26 Jul 2018 00:00:00 +0800</pubDate>
      
      <guid>https://bytemode.github.io/interview/articles/interview_analysis_4/</guid>
      <description>31. 算法 在utf8字符串判断是否包含指定字符串，并返回下标。 &amp;ldquo;北京天安门最美丽&amp;rdquo; , &amp;ldquo;天安门&amp;rdquo; 结果：2
解答：
import ( &amp;#34;fmt&amp;#34; &amp;#34;strings&amp;#34; ) func main(){ fmt.Println(Utf8Index(&amp;#34;北京天安门最美丽&amp;#34;, &amp;#34;天安门&amp;#34;)) fmt.Println(strings.Index(&amp;#34;北京天安门最美丽&amp;#34;, &amp;#34;男&amp;#34;)) fmt.Println(strings.Index(&amp;#34;&amp;#34;, &amp;#34;男&amp;#34;)) fmt.Println(Utf8Index(&amp;#34;12ws北京天安门最美丽&amp;#34;, &amp;#34;天安门&amp;#34;)) } func Utf8Index(str, substr string) int { asciiPos := strings.Index(str, substr) if asciiPos == -1 || asciiPos == 0 { return asciiPos } pos := 0 totalSize := 0 reader := strings.NewReader(str) for _, size, err := reader.ReadRune(); err == nil; _, size, err = reader.ReadRune() { totalSize += size pos++ // 匹配到 	if totalSize == asciiPos { return pos } } return pos } 32，编程 实现一个单例</description>
    </item>
    
    <item>
      <title>操作系统</title>
      <link>https://bytemode.github.io/interview/interview-os/</link>
      <pubDate>Thu, 26 Jul 2018 00:00:00 +0800</pubDate>
      
      <guid>https://bytemode.github.io/interview/interview-os/</guid>
      <description>1.Select，Poll，Epoll的区别？
 select，poll，epoll都是IO多路复用的机制，具体区别请查阅资料
查看资料
 2.什么叫虚拟内存？
 虚拟内存是计算机系统内存管理的一种技术。它使得应用程序认为它拥有连续的 可用的内存（一个连续完整的地址空间），而实际上，它通常是被分隔成多个物理内 存碎片，还有部分暂时存储在外部磁盘存储器上，在需要时进行数据交换。
 3.什么叫桥接？
 桥接是指依据OSI网络模型的链路层的地址，对网络数据包进行转发的过程，工作 在OSI的第二层；一般的交换机，网桥就有桥接作用。
 4.Linux什么命令可以查看cpu和内存？怎么查看每个核的cpu呢？
 top命令
在top查看界面按数字1即可查看每个核的数据
 5.给一个PID=100你觉得它是后台程序还是前台程序？
 进程号0-299保留给daemon进程
 6.怎么查看一个端口的TCP连接情况？
 netstat
 7.Docker的网络模式有哪几种？
 bridge网络
host网络
none网络
container模式
 8.介绍一下Tcpdump？
 tcpdump网络数据包截获分析工具。支持针对网络层、协议、主机、网络或端口 的过滤。并提供and、or、not等逻辑语句帮助去除无用的信息。
查看资料
 9. 什么叫大端和小端？
 说明 &amp;gt; 1.Little-Endian（小端）就是低位字节排放在内存的低地址端，高位字节排放在内存的高地址端
&amp;gt; 2.Big-Endian（大端）就是高位字节排放在内存的低地址端，低位字节排放在内存的高地址端。
使用场景
 一般操作系统都是小端的，而通信协议是大端的
查看资料
  10. 介绍下 docker 底层原理
  查看资料 左耳朵耗子 Docker 基础技术介绍(有例程)   11.介绍些僵尸进程和孤儿进程的区别, 怎么产生的, 怎么避免?</description>
    </item>
    
    <item>
      <title>数据库</title>
      <link>https://bytemode.github.io/interview/interview-database/</link>
      <pubDate>Thu, 26 Jul 2018 00:00:00 +0800</pubDate>
      
      <guid>https://bytemode.github.io/interview/interview-database/</guid>
      <description>1.Mysql事物的隔离级别?
   事务隔离级别 脏读 不可重复读 幻读     读未提交（read-uncommitted） 是 是 是   读已提交（read-committed） 否 是 是   可重复读（repeatable-read） 否 否 是   串行化（serializable） 否 否 否     相关资料
 2.Innodb和Myisam的区别？
 Innodb支持事务，而Myisam不支持事务
Innodb支持行级锁，而Myisam支持表级锁
Innodb支持外键，而Myisam不支持
Innodb不支持全文索引，而Myisam支持
Innodb是索引组织表， Myisam是堆表
相关资料
 3.Mysql慢响应默认时间?
 10s
 4.Explain的含义?
 explain显示了mysql如何使用索引来处理select语句以及连接表。可以帮助 选择更好的索引和写出更优化的查询语句。
 5.Profile的意义以及使用场景?
 Profile用来分析SQL性能的消耗分布情况。当用explain无法解决慢SQL的时 候，需要用profile来对SQL进行更细致的分析，找出SQL所花的时间大部分消耗在 哪个部分，确认SQL的性能瓶颈。
 6.Redis的过期失效机制？
 scan扫描+给每个key存储过期时间戳
 7.Redis持久化方案aof的默认fsync时间是多长？</description>
    </item>
    
    <item>
      <title>数据结构</title>
      <link>https://bytemode.github.io/interview/interview-data-structure/</link>
      <pubDate>Thu, 26 Jul 2018 00:00:00 +0800</pubDate>
      
      <guid>https://bytemode.github.io/interview/interview-data-structure/</guid>
      <description>1.什么是跳跃表?
 跳跃表是基于有序链表的一种扩展
查看资料
 2. 介绍下 RESTFull API 方式下, 怎么做到快速路由?
 一般使用前缀树/字典树, 来提高查找速度.
开源的路由模块里, httprouter 是比较快的, 参考: https://github.com/julienschmidt/httprouter
他使用了一种改进版的前缀树算法. 这个树的应用非常广泛, 除了做路由, 还有 linux 内核里使用, 在数据库里也有用到.
参考文章:
1. 路由查找之Radix Tree
2. 图文详解Radix树
3. radix tree在数据库PostgreSQL中的一些应用举例
 </description>
    </item>
    
    <item>
      <title>架构</title>
      <link>https://bytemode.github.io/interview/interview-architecture/</link>
      <pubDate>Thu, 26 Jul 2018 00:00:00 +0800</pubDate>
      
      <guid>https://bytemode.github.io/interview/interview-architecture/</guid>
      <description>1.Etcd满足了CAP原理中哪两个特性？
 etcd是高可用的键值存储系统。满足CP原理
 2.Etcd V2和V3版本的区别？
 V2和V3接口不一致，存储不一样，数据互相隔离
  A.V2是纯内存实现，并未实时将数据写入到磁盘；V3是内存索引(kvindex btree) + 后端数据库存储(boltdb: 单机的支持事务的kv存储)
B.V2过期时间只能设置到每个key上，如果多个key要保证生命周期一致则比 较困难；V3过期时间通过lease，可以给每个key设置相同的过期id
C.V2 Watch只能watch某一个key以及子节点(通过参数recursive)，不能 进行多个watch；V3 watch机制支持watch某个固定的key，也支持watch一个范围
D.V2提供http接口；V3通过grpc提供rpc接口
  查看资料
  3.当时选型etcd的考量是啥？和ZK有哪些区别？
 相同点
 1.应用场景类似: 配置管理，服务注册发现，选主，应用调度，分布式队列，分布式锁。
 不同点
 1.Etcd使用raft协议;Zk使用paxos协议，前者易于理解，方便工程实现。
2.Etcd相对来说部署方便；Zk的部署、维护、使用比较复杂，需要安装客户端。
3.Etcd提供http+json，grpc接口，跨平台语言; Zk则需要使用其客户端。
4.Etcd支持https访问; Zk在这方面缺失。
  4.服务治理包含哪些？
 服务注册和发现
服务监控
集群容错 负载均衡
 5.负载均衡分类？
 1.DNS负载均衡(地理负载均衡)
2.硬件负载均衡(F5和A10,能支撑200万-800万/秒并发，价格昂贵)
3.软件负载均衡(Nginx和Lvs,nginx支撑5万/秒，LVS支撑80万/秒，价格便宜， 扩展方便)
并发访问量大于1000万时可以考虑配合使用
 6.Nginx和Lvs的区别？
 1.Nginx 大多工作在第7层，网络的依赖比较小，可以对HTTP应用实施分流策略，比如域名、结构等（也可以工作在第4层网络层，例如对mysql做反向代理，做授权和负载均衡等）；Lvs工作在第4层，比较依赖网络环境，可以对几乎所有应用进行负载均衡，包括Web、数据库等
2.Nginx负载能力强，因为其工作方式逻辑非常简单，仅进行请求分发，没有流量；Lvs负载能力较差，受限于机器的I/O配置(处理流量)
3.Nginx安装，配置及测试相对简单；Lvs的安装、配置及测试所花的时间比较长
参考资料
 7. 你们是怎么解决微服务之间调用优化与问题排查的?
 关键词: 链路监控, Google Dapper 论文</description>
    </item>
    
    <item>
      <title>笔试题</title>
      <link>https://bytemode.github.io/interview/interview-pen/</link>
      <pubDate>Thu, 26 Jul 2018 00:00:00 +0800</pubDate>
      
      <guid>https://bytemode.github.io/interview/interview-pen/</guid>
      <description> Golang笔试题解析  查看资料
 </description>
    </item>
    
    <item>
      <title>算法题</title>
      <link>https://bytemode.github.io/interview/interview-algorithm/</link>
      <pubDate>Thu, 26 Jul 2018 00:00:00 +0800</pubDate>
      
      <guid>https://bytemode.github.io/interview/interview-algorithm/</guid>
      <description>如何在一个给定有序数组中找两个和为某个定值的数，要求时间复杂度为O(n), 比如给｛1，2，4，5，8，11，15｝和15？_
func Lookup(meta []int32, target int32) { left := 0 right := len(meta) - 1 for i := 0; i &amp;lt; len(meta); i++ { if meta[left]+meta[right] &amp;gt; target { right-- } else if meta[left]+meta[right] &amp;lt; target { left++ } else { fmt.Println(fmt.Sprintf(&amp;#34;%d, %d&amp;#34;, meta[left], meta[right])) return } } fmt.Println(&amp;#34;未找到匹配数据&amp;#34;) } 2.给定一个数组代表股票每天的价格，请问只能买卖一次的情况下，最大化利润是多少？日期不重叠的情况下，可以买卖多次呢？输入：{100,80,120,130,70,60,100,125}，只能买一次：65(60买进，125卖出)；可以买卖多次：115(80买进，130卖出；60买进，125卖出)？
func main() { a := []int{100, 80, 120, 130, 70, 60, 100, 125} // a := []int{68, 0, 1, 67} 	var buyPrice, salePrice = 1&amp;lt;&amp;lt;31 - 1, -1 &amp;lt;&amp;lt; 31 var buyDay, saleDay = -1, -1 type Op struct { BuyDay, SaleDay int BuyPrice, SalePrice int Earnings int } var opList = []Op{} // 遇到的第一个波谷买入，下一个波峰卖出，可以获取最大收益 	for k, todayPrice := range a { if buyDay == -1 { // 寻找买入点 	if todayPrice &amp;lt; buyPrice { buyPrice = todayPrice continue } // 买入 	buyDay = k - 1 continue } // 寻找卖出点 	if todayPrice &amp;gt; salePrice { salePrice = todayPrice if k &amp;lt; len(a)-1 { continue } } // 卖出 	if k &amp;lt; len(a)-1 { saleDay = k - 1 } else { saleDay = k } opList = append(opList, Op{ BuyDay: buyDay, SaleDay: saleDay, BuyPrice: buyPrice, SalePrice: salePrice, Earnings: salePrice - buyPrice, }) // 重复下一轮操作 	buyPrice, salePrice = 1&amp;lt;&amp;lt;31-1, -1&amp;lt;&amp;lt;31 buyDay, saleDay = -1, -1 } fmt.</description>
    </item>
    
    <item>
      <title>网络</title>
      <link>https://bytemode.github.io/interview/interview-network/</link>
      <pubDate>Thu, 26 Jul 2018 00:00:00 +0800</pubDate>
      
      <guid>https://bytemode.github.io/interview/interview-network/</guid>
      <description>1.tcp三次握手和四次挥手流程示意图？在黑板上画出
 查看资料
 2.客户端在建立异常中发现很多connect reset by peer,你觉得问题出在哪？
 三次握手维护的半连接队列或者全连接队列溢出导致
查看资料
 3.https建立连接的过程?
 1.客户端发送请求到服务器端
2.服务器端返回证书和公开密钥，公开密钥作为证书的一部分而存在
3.客户端验证证书和公开密钥的有效性，如果有效，则生成对称密钥并使用公开密钥加密发送到服务器端
4.服务器端使用私有密钥解密数据，并使用收到的对称密钥加密数据，发送到客户端
5.客户端使用对称密钥解密数据
6.SSL加密建立………
 4.tcp和udp的区别?
 1.TCP面向连接(如打电话要先拨号建立连接);UDP是无连接的，即发送数据之前 不需要建立连接
2.TCP提供可靠的服务。也就是说，通过TCP连接传送的数据，无差错，不丢失， 不重复，且按序到达;UDP尽最大努力交付，即不保证可靠交付
3.TCP面向字节流，实际上是TCP把数据看成一连串无结构的字节流;UDP是面向 报文的，UDP没有拥塞控制，因此网络出现拥塞不会使源主机的发送速率降低
4.每一条TCP连接只能是点到点的;UDP支持一对一，一对多，多对一和多对多的 交互通信
5.TCP首部开销20字节;UDP的首部开销小，只有8个字节
6.TCP的逻辑通信信道是全双工的可靠信道，UDP则是不可靠信道
 5.http，tcp，ip分别处于OSI哪一层？
 传输层协议：TCP、UDP、SCTP
网络层协议：IP、ARP、RARP、ICMP、IGMP、OSPF
应用层协议：http，FTP、SMTP、RIP、DNS
 </description>
    </item>
    
    <item>
      <title>设计题</title>
      <link>https://bytemode.github.io/interview/interview-design/</link>
      <pubDate>Thu, 26 Jul 2018 00:00:00 +0800</pubDate>
      
      <guid>https://bytemode.github.io/interview/interview-design/</guid>
      <description>1.要设计一个秒杀系统要注意什么？
 前端秒杀页面
 页面静态化：将活动页面上的所有可以静态的元素全部静态化，并尽量减少动态 元素。通过CDN来抗峰值。
禁止重复提交：用户提交之后按钮置灰，禁止重复提交。
用户限流：在某一时间段内只允许用户提交一次请求，比如可以采取IP限流。
 服务端控制器(网关)
 限制uid访问频率：我们上面拦截了浏览器访问的请求，但针对某些恶意攻击或其它插件，在服务端控制层需要针对同一个访问uid，限制访问频率。
 服务层
 采用消息队列缓存请求：既然服务层知道库存只有100台手机，那完全没有必要把100W个请求都传递到数据库啊，那么可以先把这些请求都写到消息队列缓存一下，数据库层订阅消息减库存，减库存成功的请求返回秒杀成功，失败的返回秒杀结束。
利用缓存应对读请求：对类似于12306等购票业务，是典型的读多写少业务，大部分请求是查询请求，所以可以利用缓存分担数据库压力。
利用缓存应对写请求：缓存也是可以应对写请求的，比如我们就可以把数据库中的库存数据转移到Redis缓存中，所有减库存操作都在Redis中进行，然后再通过后台进程把Redis中的用户秒杀请求同步到数据库中。
 数据库层
 数据库层是最脆弱的一层，一般在应用设计时在上游就需要把请求拦截掉，数据库层只承担“能力范围内”的访问请求。所以，上面通过在服务层引入队列和缓存，让最底层的数据库高枕无忧。
  2.要设计一个类似微信红包架构系统要注意什么？
 南北分区
快慢分离
Hash负载均衡
Cache屏蔽DB
双维度分库表
查看资料
 </description>
    </item>
    
  </channel>
</rss>